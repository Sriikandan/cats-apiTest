// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace APIValidation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ValidateFactsEndpointwithUser")]
    public partial class ValidateFactsEndpointwithUserFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ValidateFactsEndpointUser.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "ValidateFactsEndpointwithUser", "A short summary of the feature", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify the facts endpoint with users and response data")]
        [NUnit.Framework.CategoryAttribute("elab")]
        [NUnit.Framework.TestCaseAttribute("58e008800aac31001185ed07", "58e007480aac31001185ecef", "Wikipedia has a recording of a cat meowing, because why not?", "Kasimir", "Schulz", "cat", null)]
        [NUnit.Framework.TestCaseAttribute("58e008630aac31001185ed01", "58e007480aac31001185ecef", "When cats grimace, they are usually \"taste-scenting.\" They have an extra organ th" +
            "at, with some breathing control, allows the cats to taste-sense the air.", "Kasimir", "Schulz", "cat", null)]
        [NUnit.Framework.TestCaseAttribute("58e00a090aac31001185ed16", "58e007480aac31001185ecef", "Cats make more than 100 different sounds whereas dogs make around 10.", "Kasimir", "Schulz", "cat", null)]
        [NUnit.Framework.TestCaseAttribute("58e009a90aac31001185ed23", "58e007480aac31001185ecef", "Cats can distinguish different flavors in water.", "Kasimir", "Schulz", "cat", null)]
        [NUnit.Framework.TestCaseAttribute("58e009390aac31001185ed10", "58e007480aac31001185ecef", "Most cats are lactose intolerant, and milk can cause painful stomach cramps and d" +
            "iarrhea.  It\'s best to forego the milk and just give your cat the standard: clea" +
            "n, cool drinking water.", "Kasimir", "Schulz", "cat", null)]
        [NUnit.Framework.TestCaseAttribute("58e008780aac31001185ed05", "58e007480aac31001185ecef", "Owning a cat can reduce the risk of stroke and heart attack by a third.", "Kasimir", "Schulz", "cat", null)]
        public virtual void VerifyTheFactsEndpointWithUsersAndResponseData(string _Id, string user, string text, string firstname, string lastname, string type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "elab"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("_id", _Id);
            argumentsOfScenario.Add("user", user);
            argumentsOfScenario.Add("text", text);
            argumentsOfScenario.Add("firstname", firstname);
            argumentsOfScenario.Add("lastname", lastname);
            argumentsOfScenario.Add("type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify the facts endpoint with users and response data", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("I have the endpoint \"https://cat-fact.herokuapp.com\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("I Get the facts", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.Then("I should get reponse code as OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 10
 testRunner.And(string.Format("I validate the response of the {0} with user {1} text {2} with {3} and {4} match " +
                            "{5}", _Id, user, text, firstname, lastname, type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
